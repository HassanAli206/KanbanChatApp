@page "/Account/Manage/EnableAuthenticator"

@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using KanbanChatApp.Data

@inject UserManager<ApplicationUser> UserManager
@inject IdentityUserAccessor UserAccessor
@inject UrlEncoder UrlEncoder
@inject IdentityRedirectManager RedirectManager
@inject ILogger<EnableAuthenticator> Logger

@rendermode InteractiveServer

<PageTitle>Configure Authenticator App</PageTitle>

<style>
    body {
        background: url('/images/teamsync-preview.jpg') no-repeat center center fixed;
        background-size: cover;
        font-family: 'Segoe UI', sans-serif;
    }

    .card, .form-control, .btn {
        border-radius: 10px;
    }

    .card {
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
        background-color: white;
    }

    h3, h5, label, p, ol {
        color: white;
    }
</style>

<div class="container py-5">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            @if (recoveryCodes is not null)
            {
                <ShowRecoveryCodes RecoveryCodes="recoveryCodes.ToArray()" StatusMessage="@message" />
            }
            else
            {
                <div class="card p-4 mb-4">
                    <StatusMessage Message="@message" />
                    <h3 class="mb-3">Configure Authenticator App</h3>
                    <p>To use an authenticator app, follow these steps:</p>
                    <ol>
                        <li>
                            <p>
                                Download a two-factor authenticator app like Microsoft Authenticator for
                                <a href="https://go.microsoft.com/fwlink/?Linkid=825072" target="_blank">Android</a> and
                                <a href="https://go.microsoft.com/fwlink/?Linkid=825073" target="_blank">iOS</a>, or
                                Google Authenticator for
                                <a href="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&amp;hl=en" target="_blank">Android</a> and
                                <a href="https://itunes.apple.com/us/app/google-authenticator/id388497605?mt=8" target="_blank">iOS</a>.
                            </p>
                        </li>
                        <li>
                            <p>Scan the QR Code or enter this key <kbd>@sharedKey</kbd> into your two-factor authenticator app. Spaces and casing do not matter.</p>
                            <div class="alert alert-info">
                                Learn how to <a href="https://go.microsoft.com/fwlink/?Linkid=852423" target="_blank">enable QR code generation</a>.
                            </div>
                            <div data-url="@authenticatorUri"></div>
                        </li>
                        <li>
                            <p>
                                Once you have scanned the QR code or input the key above, your authenticator app will provide you with a unique code. Enter the code below.
                            </p>
                            <EditForm Model="Input" FormName="send-code" OnValidSubmit="OnValidSubmitAsync" method="post">
                                <DataAnnotationsValidator />
                                <div class="form-floating mb-3">
                                    <InputText @bind-Value="Input.Code" class="form-control" autocomplete="off" placeholder="Please enter the code." />
                                    <label for="code" class="form-label">Verification Code</label>
                                    <ValidationMessage For="() => Input.Code" class="text-danger" />
                                </div>
                                <button type="submit" class="btn btn-primary w-100">Verify</button>
                                <ValidationSummary class="text-danger mt-2" role="alert" />
                            </EditForm>
                        </li>
                    </ol>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private const string AuthenticatorUriFormat = "otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6";

    private string? message;
    private ApplicationUser user = default!;
    private string? sharedKey;
    private string? authenticatorUri;
    private IEnumerable<string>? recoveryCodes;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        await LoadSharedKeyAndQrCodeUriAsync(user);
    }

    private async Task OnValidSubmitAsync()
    {
        var verificationCode = Input.Code.Replace(" ", string.Empty).Replace("-", string.Empty);
        var is2faTokenValid = await UserManager.VerifyTwoFactorTokenAsync(
            user, UserManager.Options.Tokens.AuthenticatorTokenProvider, verificationCode);

        if (!is2faTokenValid)
        {
            message = "Error: Verification code is invalid.";
            return;
        }

        await UserManager.SetTwoFactorEnabledAsync(user, true);
        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("User with ID '{UserId}' has enabled 2FA with an authenticator app.", userId);

        message = "Your authenticator app has been verified.";

        if (await UserManager.CountRecoveryCodesAsync(user) == 0)
        {
            recoveryCodes = await UserManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);
        }
        else
        {
            RedirectManager.RedirectToWithStatus("Account/Manage/TwoFactorAuthentication", message, HttpContext);
        }
    }

    private async ValueTask LoadSharedKeyAndQrCodeUriAsync(ApplicationUser user)
    {
        var unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
        if (string.IsNullOrEmpty(unformattedKey))
        {
            await UserManager.ResetAuthenticatorKeyAsync(user);
            unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
        }

        sharedKey = FormatKey(unformattedKey!);
        var email = await UserManager.GetEmailAsync(user);
        authenticatorUri = GenerateQrCodeUri(email!, unformattedKey!);
    }

    private string FormatKey(string unformattedKey)
    {
        var result = new StringBuilder();
        int currentPosition = 0;
        while (currentPosition + 4 < unformattedKey.Length)
        {
            result.Append(unformattedKey.AsSpan(currentPosition, 4)).Append(' ');
            currentPosition += 4;
        }
        if (currentPosition < unformattedKey.Length)
        {
            result.Append(unformattedKey.AsSpan(currentPosition));
        }
        return result.ToString().ToLowerInvariant();
    }

    private string GenerateQrCodeUri(string email, string unformattedKey)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            AuthenticatorUriFormat,
            UrlEncoder.Encode("Microsoft.AspNetCore.Identity.UI"),
            UrlEncoder.Encode(email),
            unformattedKey);
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(7, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Text)]
        [Display(Name = "Verification Code")]
        public string Code { get; set; } = "";
    }
}

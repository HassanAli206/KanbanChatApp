@page "/projectdetails/{ProjectId:int}"
@using KanbanChatApp.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@inject ApplicationDbContext Db
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>Project Details</PageTitle>

<style>
    .project-details-bg {
        position: relative;
        background: url('/images/teamsync-preview.jpg') no-repeat center center fixed;
        background-size: cover;
        min-height: 100vh;
        padding-top: 4rem;
        padding-bottom: 4rem;
    }

        .project-details-bg::before {
            content: "";
            position: fixed;
            inset: 0;
            background: rgba(255, 255, 255, 0.6); /* soft white overlay */
            backdrop-filter: blur(6px);
            z-index: 0;
        }

    .content-shell {
        max-width: 1100px;
        margin: auto;
        padding: 2rem;
        position: relative;
        z-index: 1;
    }

    .glass-card {
        background: rgba(255, 255, 255, 0.92);
        backdrop-filter: blur(12px);
        border-radius: 16px;
        padding: 1.5rem;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        margin-bottom: 2rem;
    }

    .glass-header {
        background: linear-gradient(to right, #4f46e5, #9333ea);
        color: white;
        padding: 1rem 1.5rem;
        border-top-left-radius: 16px;
        border-top-right-radius: 16px;
        margin: -1.5rem -1.5rem 1.5rem -1.5rem;
    }

    .form-control,
    .form-select,
    .btn {
        border-radius: 10px;
    }

    .btn-gradient {
        background: linear-gradient(to right, #4f46e5, #9333ea);
        color: white;
        border: none;
        border-radius: 10px;
        padding: 0.6rem 1.2rem;
        font-weight: 600;
        transition: box-shadow 0.3s ease;
    }

        .btn-gradient:hover {
            box-shadow: 0 8px 20px rgba(147, 51, 234, 0.3);
        }

    .table {
        background-color: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
    }

        .table th, .table td {
            vertical-align: middle;
        }
</style>

<div class="project-details-bg">
    <div class="content-shell">
        <h3 class="mb-4 text-dark fw-bold">📁 Project Details</h3>

        @if (project == null)
        {
            <div class="alert alert-info">
                <em>Loading...</em>
            </div>
        }
        else
        {
            <!-- Project Overview -->
            <div class="glass-card">
                <div class="glass-header">
                    <h5 class="mb-0">@project.Name</h5>
                </div>
                <p>@project.Description</p>
            </div>

            <!-- Add Task Form (Admins Only) -->
            @if (isAdmin)
            {
                <div class="glass-card">
                    <div class="glass-header">
                        <h5 class="mb-0">📝 Add Task</h5>
                    </div>
                    <EditForm Model="newTask" OnValidSubmit="AddTask" FormName="AddTaskForm">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="mb-3">
                            <label class="form-label">Title</label>
                            <InputText @bind-Value="newTask.Title" class="form-control" placeholder="Enter task title" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Status</label>
                            <InputSelect @bind-Value="newTask.Status" class="form-select">
                                <option value="To-Do">To-Do</option>
                                <option value="In Progress">In Progress</option>
                                <option value="Done">Done</option>
                            </InputSelect>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Assign to</label>
                            <select class="form-select" @bind="newTask.AssignedUserId">
                                <option value="">-- Unassigned --</option>
                                @foreach (var user in users)
                                {
                                    <option value="@user.Id">@user.UserName</option>
                                }
                            </select>
                        </div>

                        <button type="submit" class="btn btn-gradient">Add Task</button>
                    </EditForm>
                </div>
            }

            <!-- Task List -->
            <div class="glass-card">
                <div class="glass-header">
                    <h5 class="mb-0">📋 Tasks</h5>
                </div>

                @if (project.Tasks == null || !project.Tasks.Any())
                {
                    <div class="alert alert-warning mt-3">No tasks found.</div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-bordered mt-3">
                            <thead class="table-dark">
                                <tr>
                                    <th>Title</th>
                                    <th>Status</th>
                                    <th>Assigned To</th>
                                    @if (!isAdmin)
                                    {
                                        <th>Update Status</th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var task in project.Tasks)
                                {
                                    <tr>
                                        <td>@task.Title</td>
                                        <td>
                                            <span class="badge @(task.Status switch {
                                                "To-Do" => "bg-secondary",
                                                "In Progress" => "bg-warning text-dark",
                                                "Done" => "bg-success",
                                                _ => "bg-light"
                                            })">
                                                @task.Status
                                            </span>
                                        </td>
                                        <td>
                                            @if (task.AssignedUser != null)
                                            {
                                                <span class="text-primary fw-semibold">@task.AssignedUser.UserName</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Unassigned</span>
                                            }
                                        </td>
                                        @if (!isAdmin)
                                        {
                                            <td>
                                                <InputSelect @bind-Value="task.Status" class="form-select" @onchange="@(() => UpdateTaskStatus(task))">
                                                    <option value="To-Do">To-Do</option>
                                                    <option value="In Progress">In Progress</option>
                                                    <option value="Done">Done</option>
                                                </InputSelect>
                                            </td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public required int ProjectId { get; set; }

    private Project? project;
    private TaskItem newTask = new TaskItem();
    private bool isAdmin = false;
    private List<ApplicationUser> users = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        if (user != null)
        {
            isAdmin = await UserManager.IsInRoleAsync(user, "Admin");

            if (isAdmin)
            {
                users = UserManager.Users.ToList();
            }
        }

        LoadProject();
    }

    private void LoadProject()
    {
        project = Db.Projects
            .Include(p => p.Tasks)
                .ThenInclude(t => t.AssignedUser)
            .FirstOrDefault(p => p.Id == ProjectId);

        newTask = new TaskItem
            {
                ProjectId = ProjectId,
                Status = "To-Do"
            };
    }

    private async Task AddTask()
    {
        if (Db != null && newTask != null)
        {
            await Db.Tasks.AddAsync(newTask); // Change TaskItems to Tasks
            await Db.SaveChangesAsync();
            LoadProject();
            StateHasChanged();
        }
    }

    private async Task UpdateTaskStatus(TaskItem task)
    {
        if (Db != null && task != null)
        {
            Db.Tasks.Update(task); // Change TaskItems to Tasks
            await Db.SaveChangesAsync();
            LoadProject();
            StateHasChanged();
        }
    }
}

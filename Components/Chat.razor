@page "/chat/{ProjectId:int}"
@using KanbanChatApp.Hubs;
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthProvider

<h3 class="mb-4">Project Chat</h3>

<div class="card">
    <div class="card-body" style="height: 300px; overflow-y: auto;" id="chatBox">
        @foreach (var msg in messages)
        {
            <div class="mb-3">
                <div class="fw-bold">@msg.User</div>
                <div class="bg-light border rounded p-2">@msg.Text</div>
            </div>
        }
    </div>
</div>

<EditForm OnValidSubmit="Send" FormName="ChatForm" Model="@this">
    <div class="input-group mt-3">
        <InputText class="form-control" @bind-Value="currentMessage" placeholder="Type a message..." />
        <button type="submit" class="btn btn-primary">Send</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int ProjectId { get; set; }

    private HubConnection? hubConnection;
    private string currentMessage = string.Empty;
    private string userName = "Unknown";
    private List<ChatMessage> messages = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        userName = authState.User.Identity?.Name ?? "Unknown";

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavManager.ToAbsoluteUri($"/chathub?projectId={ProjectId}"), options =>
            {
                options.Headers.Add("X-CSRF", "1"); // workaround to bypass antiforgery in dev
            })
            .WithAutomaticReconnect()
            .Build();

        // 🔴 Called when a message is received
        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            Console.WriteLine($"📩 Received: {message} from {user}");
            messages.Add(new ChatMessage { User = user, Text = message });
            InvokeAsync(StateHasChanged);
        });


        // 🔴 Log when connection is closed
        hubConnection.Closed += async (error) =>
        {
            Console.WriteLine("SignalR connection closed.");
            if (error != null)
                Console.WriteLine("Closed with error: " + error.Message);
            await Task.Delay(3000); // wait before retry
            await hubConnection.StartAsync();
        };

        try
        {
            await hubConnection.StartAsync();
            Console.WriteLine("✅ SignalR connected.");
        }
        catch (Exception ex)
        {
            Console.WriteLine("❌ SignalR connection failed: " + ex.Message);
            if (ex.InnerException != null)
                Console.WriteLine("Inner exception: " + ex.InnerException.Message);
        }
    }


    private async Task Send()
    {
        Console.WriteLine($"📤 Attempting to send: {currentMessage}");

        if (!string.IsNullOrWhiteSpace(currentMessage) && hubConnection is not null)
        {
            try
            {
                await hubConnection.SendAsync("SendMessage", ProjectId.ToString(), userName, currentMessage);
                Console.WriteLine("✅ Message sent to hub.");
            }
            catch (Exception ex)
            {
                Console.WriteLine("❌ Error sending message: " + ex.Message);
            }

            currentMessage = string.Empty;
        }
    }



    private class ChatMessage
    {
        public string User { get; set; } = "";
        public string Text { get; set; } = "";
    }
}

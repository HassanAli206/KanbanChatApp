@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using KanbanChatApp.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<style>
    body {
        background: url('/images/teamsync-preview.jpg') no-repeat center center fixed;
        background-size: cover;
        font-family: 'Segoe UI', sans-serif;
    }

    .login-container {
        background-color: rgba(255, 255, 255, 0.85);
        border-radius: 20px;
        padding: 3rem;
        max-width: 600px;
        margin: 5rem auto;
        box-shadow: 0 0 30px rgba(0, 0, 0, 0.1);
    }

    .login-title {
        color: #5a30d0;
        font-size: 2rem;
        font-weight: bold;
        margin-bottom: 1rem;
    }

    .form-floating input {
        border-radius: 10px;
        padding: 1rem;
    }

    .btn-login {
        background: linear-gradient(90deg, #6a11cb 0%, #2575fc 100%);
        color: white;
        font-weight: bold;
        padding: 0.75rem;
        border-radius: 10px;
        box-shadow: 0 10px 20px rgba(106, 17, 203, 0.3);
        transition: 0.3s;
    }

    .btn-login:hover {
        box-shadow: 0 15px 25px rgba(106, 17, 203, 0.4);
        transform: translateY(-2px);
    }

    .nav-sidebar {
        position: fixed;
        top: 2rem;
        left: 2rem;
        background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
        padding: 1rem 2rem;
        border-radius: 20px;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
        z-index: 1000;
    }

    .nav-sidebar a {
        color: white;
        font-weight: bold;
        display: block;
        margin-bottom: 1rem;
        text-decoration: none;
    }

    .nav-sidebar a:hover {
        text-decoration: underline;
    }
</style>

<div class="nav-sidebar">
    <a href="/Account/Login">Login</a>
    <a href="/Account/Register">Register</a>
</div>

<div class="login-container">
    <StatusMessage Message="@errorMessage" />
    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
        <DataAnnotationsValidator />
        <div class="login-title">Log In</div>
        <h5 class="text-muted">Use a local account to log in</h5>
        <hr />
        <ValidationSummary class="text-danger" role="alert" />
        <div class="form-floating mb-3">
            <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
            <label for="email" class="form-label">Email</label>
            <ValidationMessage For="() => Input.Email" class="text-danger" />
        </div>
        <div class="form-floating mb-3">
            <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
            <label for="password" class="form-label">Password</label>
            <ValidationMessage For="() => Input.Password" class="text-danger" />
        </div>
        <div class="checkbox mb-3">
            <label class="form-label">
                <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                Remember me
            </label>
        </div>
        <div>
            <button type="submit" class="w-100 btn btn-login">Log in</button>
        </div>
        <div class="mt-3">
            <p><a href="/Account/ForgotPassword">Forgot your password?</a></p>
            <p><a href="@(NavigationManager.GetUriWithQueryParameters("/Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a></p>
            <p><a href="/Account/ResendEmailConfirmation">Resend email confirmation</a></p>
        </div>
    </EditForm>
    <section class="external-login-section mt-4">
        <h5><strong>Use another service to log in</strong></h5>
        <hr />
        <ExternalLoginPicker />
    </section>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}

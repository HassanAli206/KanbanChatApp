@page "/Account/RegisterConfirmation"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using KanbanChatApp.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register confirmation</PageTitle>

<style>
    body {
        background: url('/images/teamsync-preview.jpg') no-repeat center center fixed;
        background-size: cover;
        font-family: 'Segoe UI', sans-serif;
    }

    .confirmation-container {
        background-color: rgba(255, 255, 255, 0.9);
        border-radius: 20px;
        padding: 3rem;
        max-width: 700px;
        margin: 5rem auto;
        box-shadow: 0 0 30px rgba(0, 0, 0, 0.1);
    }

    .confirmation-title {
        color: #5a30d0;
        font-size: 2.25rem;
        font-weight: bold;
        margin-bottom: 1rem;
    }

    .confirmation-message {
        font-size: 1.1rem;
        color: #333;
    }

    a {
        color: #2575fc;
        text-decoration: underline;
    }
</style>

<div class="confirmation-container">
    <div class="confirmation-title">Register Confirmation</div>
    <StatusMessage Message="@statusMessage" />

    @if (emailConfirmationLink is not null)
    {
        <p class="confirmation-message">
            This app does not currently have a real email sender registered. See
            <a href="https://aka.ms/aspaccountconf" target="_blank">these docs</a> for how to configure a real email sender.<br />
            Normally this would be emailed:
            <a href="@emailConfirmationLink">Click here to confirm your account</a>
        </p>
    }
    else
    {
        <p class="confirmation-message">
            Please check your email to confirm your account.
        </p>
    }
</div>

@code {
    private string? emailConfirmationLink;
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = "Error finding user for unspecified email";
        }
        else if (EmailSender is IdentityNoOpEmailSender)
        {
            var userId = await UserManager.GetUserIdAsync(user);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            emailConfirmationLink = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });
        }
    }
}

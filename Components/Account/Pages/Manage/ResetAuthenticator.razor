@page "/Account/Manage/ResetAuthenticator"

@using Microsoft.AspNetCore.Identity
@using KanbanChatApp.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ResetAuthenticator> Logger

<PageTitle>Reset Authenticator Key</PageTitle>

<style>
    body {
        background: url('/images/teamsync-preview.jpg') no-repeat center center fixed;
        background-size: cover;
        font-family: 'Segoe UI', sans-serif;
    }

    .reset-auth-card {
        background-color: white;
        padding: 2rem;
        border-radius: 10px;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
        margin-top: 2rem;
    }

    .reset-auth-card h3 {
        color: #333;
    }

    .alert {
        border-radius: 10px;
    }
</style>

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="reset-auth-card">
                <h3 class="mb-4">Reset Authenticator Key</h3>
                <StatusMessage />
                <div class="alert alert-warning" role="alert">
                    <p>
                        <strong>If you reset your authenticator key, your authenticator app will not work until you reconfigure it.</strong>
                    </p>
                    <p>
                        This process disables 2FA until you verify your authenticator app.
                        If you do not complete your authenticator app configuration, you may lose access to your account.
                    </p>
                </div>
                <form @formname="reset-authenticator" @onsubmit="OnSubmitAsync" method="post">
                    <AntiforgeryToken />
                    <button class="btn btn-danger" type="submit">Reset Authenticator Key</button>
                </form>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private async Task OnSubmitAsync()
    {
        var user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        await UserManager.SetTwoFactorEnabledAsync(user, false);
        await UserManager.ResetAuthenticatorKeyAsync(user);
        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("User with ID '{UserId}' has reset their authentication app key.", userId);

        await SignInManager.RefreshSignInAsync(user);

        RedirectManager.RedirectToWithStatus(
            "Account/Manage/EnableAuthenticator",
            "Your authenticator app key has been reset. You will need to configure your authenticator app using the new key.",
            HttpContext);
    }
}

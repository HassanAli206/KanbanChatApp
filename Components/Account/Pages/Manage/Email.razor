@page "/Account/Manage/Email"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using KanbanChatApp.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager

<PageTitle>Manage Email</PageTitle>

<style>
    body {
        background: url('/images/teamsync-preview.jpg') no-repeat center center fixed;
        background-size: cover;
        font-family: 'Segoe UI', sans-serif;
    }

    .card, .form-control, .btn {
        border-radius: 10px;
    }

    .card {
        background-color: white;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
    }

    h3 {
        color: white;
    }

    .text-white label {
        color: white;
    }

    .input-group-text {
        border-radius: 0 10px 10px 0;
    }
</style>

<div class="container py-5">
    <h3 class="mb-4">Manage Email</h3>

    <StatusMessage Message="@message" />

    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card p-4">
                <form @onsubmit="OnSendEmailVerificationAsync" @formname="send-verification" id="send-verification-form" method="post">
                    <AntiforgeryToken />
                </form>

                <EditForm Model="Input" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" method="post">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert" />

                    @if (isEmailConfirmed)
                    {
                        <div class="form-floating mb-3 input-group">
                            <input type="text" value="@email" class="form-control" placeholder="Please enter your email." disabled />
                            <span class="input-group-text text-success fw-bold">✓</span>
                            <label for="email" class="form-label">Email</label>
                        </div>
                    }
                    else
                    {
                        <div class="form-floating mb-3">
                            <input type="text" value="@email" class="form-control" placeholder="Please enter your email." disabled />
                            <label for="email" class="form-label">Email</label>
                            <button type="submit" class="btn btn-link px-0" form="send-verification-form">Send verification email</button>
                        </div>
                    }

                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.NewEmail" class="form-control" autocomplete="email" placeholder="Please enter new email." />
                        <label for="new-email" class="form-label">New email</label>
                        <ValidationMessage For="() => Input.NewEmail" class="text-danger" />
                    </div>

                    <button type="submit" class="w-100 btn btn-primary">Change Email</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private string? email;
    private bool isEmailConfirmed;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        email = await UserManager.GetEmailAsync(user);
        isEmailConfirmed = await UserManager.IsEmailConfirmedAsync(user);

        Input.NewEmail ??= email;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.NewEmail is null || Input.NewEmail == email)
        {
            message = "Your email is unchanged.";
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmailChange").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["email"] = Input.NewEmail, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, Input.NewEmail, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Confirmation link to change email sent. Please check your email.";
    }

    private async Task OnSendEmailVerificationAsync()
    {
        if (email is null) return;

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, email, HtmlEncoder.Default.Encode(callbackUrl));
        message = "Verification email sent. Please check your email.";
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "New email")]
        public string? NewEmail { get; set; }
    }
}

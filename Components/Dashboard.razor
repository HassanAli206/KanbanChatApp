@page "/dashboard"
@using KanbanChatApp.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthProvider
@inject ApplicationDbContext Db

@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>Project Dashboard</PageTitle>

<style>
    .dashboard-bg {
        background: url('/images/teamsync-preview.jpg') no-repeat center center fixed;
        background-size: cover;
        font-family: 'Segoe UI', sans-serif;
        min-height: 100vh;
        padding-top: 4rem;
        padding-bottom: 4rem;
    }

    .dashboard-container {
        background-color: rgba(255, 255, 255, 0.95);
        border-radius: 15px;
        padding: 2rem;
        max-width: 1000px;
        margin: auto;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
    }

    .glass-card {
        background: rgba(255, 255, 255, 0.85);
        backdrop-filter: blur(10px);
        border-radius: 16px;
        padding: 1.5rem;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.08);
    }

    .glass-header {
        background: linear-gradient(to right, #4f46e5, #9333ea);
        border-top-left-radius: 16px;
        border-top-right-radius: 16px;
        padding: 1rem 1.5rem;
        color: white;
    }

    .form-control {
        border-radius: 10px !important;
        padding: 0.75rem 1rem;
    }

    .btn-gradient {
        background: linear-gradient(to right, #4f46e5, #9333ea);
        color: white;
        border: none;
        border-radius: 10px;
        padding: 0.6rem 1.2rem;
        font-weight: 600;
        transition: box-shadow 0.3s ease;
    }

        .btn-gradient:hover {
            box-shadow: 0 8px 20px rgba(147, 51, 234, 0.3);
        }

    .project-list .card {
        background: rgba(255, 255, 255, 0.9);
        border-radius: 16px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
        transition: transform 0.2s ease;
    }

        .project-list .card:hover {
            transform: translateY(-4px);
        }

    .project-list .card-body {
        padding: 1.2rem 1.5rem;
    }
</style>

<div class="dashboard-bg">
    <div class="dashboard-container">
        <h3 class="mb-4">Project Dashboard</h3>

        <div class="glass-card mb-5">
            <div class="glass-header">
                <h5 class="mb-0">🆕 Create New Project</h5>
            </div>
            <div class="mt-3">
                <EditForm Model="formModel" OnValidSubmit="CreateProject" FormName="CreateProjectForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />

                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <InputText @bind-Value="formModel.Name" class="form-control" placeholder="Enter project name" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <InputText @bind-Value="formModel.Description" class="form-control" placeholder="Enter project description" />
                    </div>
                    <button type="submit" class="btn btn-gradient">Create Project</button>
                </EditForm>
            </div>
        </div>

        @if (projects == null || !projects.Any())
        {
            <div class="alert alert-warning">No projects found.</div>
        }
        else
        {
            <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4 project-list">
                @foreach (var project in projects)
                {
                    <div class="col">
                        <div class="card h-100">
                            <div class="card-body">
                                <h5 class="card-title fw-bold">@project.Name</h5>
                                <p class="card-text text-muted">@project.Description</p>
                                <a href="/projectdetails/@project.Id" class="btn btn-outline-primary">View Tasks</a>
                                <a href="/jschat/@project.Id" class="btn btn-outline-secondary ms-2">Chat</a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    private List<Project> projects = new();
    private Project formModel = new();

    protected override void OnInitialized()
    {
        LoadProjects();
    }

    private void LoadProjects()
    {
        projects = Db.Projects
            .Include(p => p.Members)
            .OrderByDescending(p => p.Id)
            .ToList();
    }

    private async Task CreateProject()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        if (user == null)
        {
            Console.WriteLine("User not found.");
            return;
        }

        if (string.IsNullOrWhiteSpace(formModel.Name))
        {
            Console.WriteLine("Project name is required.");
            return;
        }

        var project = new Project
            {
                Name = formModel.Name,
                Description = formModel.Description,
                CreatedById = user.Id,
                ProjectCode = Guid.NewGuid().ToString("N")[..6],
            };

        using var transaction = await Db.Database.BeginTransactionAsync();
        try
        {
            Db.Projects.Add(project);
            await Db.SaveChangesAsync();

            Db.ProjectMembers.Add(new ProjectMember
                {
                    ProjectId = project.Id,
                    UserId = user.Id,
                    Role = "Admin"
                });

            await Db.SaveChangesAsync();
            await transaction.CommitAsync();
        }
        catch (Exception ex)
        {
            await transaction.RollbackAsync();
            Console.WriteLine($"Error: {ex.Message}");
            return;
        }

        formModel = new();
        LoadProjects();
        StateHasChanged();
    }
}
